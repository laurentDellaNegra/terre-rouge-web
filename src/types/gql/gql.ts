/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  mutation AddProductQuery($cartId: ID!, $merchandiseId: ID!, $quantity: Int!) {\n    cartLinesAdd(cartId: $cartId, lines: { merchandiseId: $merchandiseId, quantity: $quantity }) {\n      cart {\n        id\n      }\n    }\n  }\n": types.AddProductQueryDocument,
    "\n  mutation CreateCartQuery($merchandiseId: ID!, $quantity: Int!) {\n    cartCreate(input: { lines: { merchandiseId: $merchandiseId, quantity: $quantity } }) {\n      cart {\n        id\n      }\n    }\n  }\n": types.CreateCartQueryDocument,
    "\n  query GetCartQuery($id: ID!) {\n    cart(id: $id) {\n      id\n      createdAt\n      updatedAt\n      lines(first: 30) {\n        edges {\n          node {\n            id\n            quantity\n            merchandise {\n              ... on ProductVariant {\n                id\n                selectedOptions {\n                  name\n                  value\n                }\n                image {\n                  altText\n                  url(transform: { maxHeight: 160, maxWidth: 160, crop: CENTER, scale: 3 })\n                }\n                product {\n                  title\n                  handle\n                }\n                price {\n                  amount\n                  currencyCode\n                }\n                quantityAvailable\n              }\n            }\n            attributes {\n              key\n              value\n            }\n          }\n        }\n      }\n      attributes {\n        key\n        value\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n      totalQuantity\n      checkoutUrl\n    }\n  }\n": types.GetCartQueryDocument,
    "\n  mutation RemoveProductQuery($cartId: ID!, $lineId: ID!) {\n    cartLinesRemove(cartId: $cartId, lineIds: [$lineId]) {\n      cart {\n        id\n      }\n    }\n  }\n": types.RemoveProductQueryDocument,
    "\n  mutation SetProductQtyQuery($cartId: ID!, $id: ID!, $quantity: Int!) {\n    cartLinesUpdate(cartId: $cartId, lines: { id: $id, quantity: $quantity }) {\n      cart {\n        id\n      }\n    }\n  }\n": types.SetProductQtyQueryDocument,
    "\n  query GetAllProductsWithSlug {\n    products(first: 250) {\n      edges {\n        node {\n          handle\n        }\n      }\n    }\n  }\n": types.GetAllProductsWithSlugDocument,
    "\n  query GetOurSelection($maxWidth: Int = 384, $maxHeight: Int = 384) {\n    collection(handle: \"frontpage\") {\n      products(first: 4) {\n        edges {\n          node {\n            id\n            handle\n            title\n            productType\n            tags\n            priceRange {\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n              minVariantPrice {\n                amount\n                currencyCode\n              }\n            }\n            images(first: 100) {\n              edges {\n                node {\n                  altText\n                  originalSrc\n                  transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n                }\n              }\n            }\n            variants(first: 10) {\n              edges {\n                node {\n                  id\n                  title\n                  availableForSale\n                  weight\n                  weightUnit\n                  priceV2 {\n                    amount\n                    currencyCode\n                  }\n                  compareAtPriceV2 {\n                    amount\n                    currencyCode\n                  }\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  image {\n                    altText\n                    originalSrc\n                    transformedSrc(\n                      maxHeight: $maxHeight\n                      maxWidth: $maxWidth\n                      crop: CENTER\n                      scale: 3\n                    )\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetOurSelectionDocument,
    "\n  query GetProduct($handle: String!) {\n    product(handle: $handle) {\n      id\n      handle\n      title\n      productType\n      tags\n      priceRange {\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n      images(first: 10) {\n        edges {\n          node {\n            id\n            altText\n            url(transform: { maxHeight: 700, maxWidth: 700, crop: CENTER, scale: 3 })\n            smallUrl: url(transform: { maxHeight: 160, maxWidth: 160, crop: CENTER, scale: 3 })\n          }\n        }\n      }\n      descriptionHtml\n      variants(first: 10) {\n        edges {\n          node {\n            id\n            title\n            availableForSale\n            weight\n            weightUnit\n            quantityAvailable\n            price {\n              amount\n              currencyCode\n            }\n            compareAtPrice {\n              amount\n              currencyCode\n            }\n            selectedOptions {\n              name\n              value\n            }\n            image {\n              id\n            }\n          }\n        }\n      }\n      application: metafield(namespace: \"custom\", key: \"application\") {\n        key\n        value\n      }\n      benefits: metafield(namespace: \"custom\", key: \"benefits\") {\n        key\n        value\n      }\n      composition: metafield(namespace: \"custom\", key: \"composition\") {\n        key\n        value\n      }\n      conditionnement: metafield(namespace: \"custom\", key: \"conditionnement\") {\n        key\n        value\n      }\n    }\n  }\n": types.GetProductDocument,
    "\n  query GetShop {\n    shop {\n      name\n      privacyPolicy {\n        title\n        handle\n      }\n      refundPolicy {\n        title\n        handle\n      }\n      termsOfService {\n        title\n        handle\n      }\n    }\n    collections(first: 4) {\n      edges {\n        node {\n          title\n          handle\n          products(first: 50) {\n            edges {\n              node {\n                productType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetShopDocument,
    "\n  fragment ProductFields on Product {\n    id\n    handle\n    title\n    productType\n    tags\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    images(first: 100) {\n      edges {\n        node {\n          altText\n          originalSrc\n          transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n        }\n      }\n    }\n  }\n": types.ProductFieldsFragmentDoc,
    "\n  fragment RootFields on QueryRoot {\n    shop {\n      ...ShopFields\n    }\n  }\n": types.RootFieldsFragmentDoc,
    "\n  fragment ShopFields on Shop {\n    name\n    privacyPolicy {\n      title\n      handle\n    }\n    refundPolicy {\n      title\n      handle\n    }\n    termsOfService {\n      title\n      handle\n    }\n  }\n": types.ShopFieldsFragmentDoc,
    "\n  fragment VariantFields on ProductVariant {\n    id\n    title\n    availableForSale\n    weight\n    weightUnit\n    priceV2 {\n      amount\n      currencyCode\n    }\n    compareAtPriceV2 {\n      amount\n      currencyCode\n    }\n    selectedOptions {\n      name\n      value\n    }\n    image {\n      altText\n      originalSrc\n      transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n    }\n  }\n": types.VariantFieldsFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddProductQuery($cartId: ID!, $merchandiseId: ID!, $quantity: Int!) {\n    cartLinesAdd(cartId: $cartId, lines: { merchandiseId: $merchandiseId, quantity: $quantity }) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddProductQuery($cartId: ID!, $merchandiseId: ID!, $quantity: Int!) {\n    cartLinesAdd(cartId: $cartId, lines: { merchandiseId: $merchandiseId, quantity: $quantity }) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateCartQuery($merchandiseId: ID!, $quantity: Int!) {\n    cartCreate(input: { lines: { merchandiseId: $merchandiseId, quantity: $quantity } }) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCartQuery($merchandiseId: ID!, $quantity: Int!) {\n    cartCreate(input: { lines: { merchandiseId: $merchandiseId, quantity: $quantity } }) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCartQuery($id: ID!) {\n    cart(id: $id) {\n      id\n      createdAt\n      updatedAt\n      lines(first: 30) {\n        edges {\n          node {\n            id\n            quantity\n            merchandise {\n              ... on ProductVariant {\n                id\n                selectedOptions {\n                  name\n                  value\n                }\n                image {\n                  altText\n                  url(transform: { maxHeight: 160, maxWidth: 160, crop: CENTER, scale: 3 })\n                }\n                product {\n                  title\n                  handle\n                }\n                price {\n                  amount\n                  currencyCode\n                }\n                quantityAvailable\n              }\n            }\n            attributes {\n              key\n              value\n            }\n          }\n        }\n      }\n      attributes {\n        key\n        value\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n      totalQuantity\n      checkoutUrl\n    }\n  }\n"): (typeof documents)["\n  query GetCartQuery($id: ID!) {\n    cart(id: $id) {\n      id\n      createdAt\n      updatedAt\n      lines(first: 30) {\n        edges {\n          node {\n            id\n            quantity\n            merchandise {\n              ... on ProductVariant {\n                id\n                selectedOptions {\n                  name\n                  value\n                }\n                image {\n                  altText\n                  url(transform: { maxHeight: 160, maxWidth: 160, crop: CENTER, scale: 3 })\n                }\n                product {\n                  title\n                  handle\n                }\n                price {\n                  amount\n                  currencyCode\n                }\n                quantityAvailable\n              }\n            }\n            attributes {\n              key\n              value\n            }\n          }\n        }\n      }\n      attributes {\n        key\n        value\n      }\n      cost {\n        totalAmount {\n          amount\n          currencyCode\n        }\n        subtotalAmount {\n          amount\n          currencyCode\n        }\n        totalTaxAmount {\n          amount\n          currencyCode\n        }\n        totalDutyAmount {\n          amount\n          currencyCode\n        }\n      }\n      totalQuantity\n      checkoutUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveProductQuery($cartId: ID!, $lineId: ID!) {\n    cartLinesRemove(cartId: $cartId, lineIds: [$lineId]) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveProductQuery($cartId: ID!, $lineId: ID!) {\n    cartLinesRemove(cartId: $cartId, lineIds: [$lineId]) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetProductQtyQuery($cartId: ID!, $id: ID!, $quantity: Int!) {\n    cartLinesUpdate(cartId: $cartId, lines: { id: $id, quantity: $quantity }) {\n      cart {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetProductQtyQuery($cartId: ID!, $id: ID!, $quantity: Int!) {\n    cartLinesUpdate(cartId: $cartId, lines: { id: $id, quantity: $quantity }) {\n      cart {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllProductsWithSlug {\n    products(first: 250) {\n      edges {\n        node {\n          handle\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllProductsWithSlug {\n    products(first: 250) {\n      edges {\n        node {\n          handle\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOurSelection($maxWidth: Int = 384, $maxHeight: Int = 384) {\n    collection(handle: \"frontpage\") {\n      products(first: 4) {\n        edges {\n          node {\n            id\n            handle\n            title\n            productType\n            tags\n            priceRange {\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n              minVariantPrice {\n                amount\n                currencyCode\n              }\n            }\n            images(first: 100) {\n              edges {\n                node {\n                  altText\n                  originalSrc\n                  transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n                }\n              }\n            }\n            variants(first: 10) {\n              edges {\n                node {\n                  id\n                  title\n                  availableForSale\n                  weight\n                  weightUnit\n                  priceV2 {\n                    amount\n                    currencyCode\n                  }\n                  compareAtPriceV2 {\n                    amount\n                    currencyCode\n                  }\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  image {\n                    altText\n                    originalSrc\n                    transformedSrc(\n                      maxHeight: $maxHeight\n                      maxWidth: $maxWidth\n                      crop: CENTER\n                      scale: 3\n                    )\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOurSelection($maxWidth: Int = 384, $maxHeight: Int = 384) {\n    collection(handle: \"frontpage\") {\n      products(first: 4) {\n        edges {\n          node {\n            id\n            handle\n            title\n            productType\n            tags\n            priceRange {\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n              minVariantPrice {\n                amount\n                currencyCode\n              }\n            }\n            images(first: 100) {\n              edges {\n                node {\n                  altText\n                  originalSrc\n                  transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n                }\n              }\n            }\n            variants(first: 10) {\n              edges {\n                node {\n                  id\n                  title\n                  availableForSale\n                  weight\n                  weightUnit\n                  priceV2 {\n                    amount\n                    currencyCode\n                  }\n                  compareAtPriceV2 {\n                    amount\n                    currencyCode\n                  }\n                  selectedOptions {\n                    name\n                    value\n                  }\n                  image {\n                    altText\n                    originalSrc\n                    transformedSrc(\n                      maxHeight: $maxHeight\n                      maxWidth: $maxWidth\n                      crop: CENTER\n                      scale: 3\n                    )\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProduct($handle: String!) {\n    product(handle: $handle) {\n      id\n      handle\n      title\n      productType\n      tags\n      priceRange {\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n      images(first: 10) {\n        edges {\n          node {\n            id\n            altText\n            url(transform: { maxHeight: 700, maxWidth: 700, crop: CENTER, scale: 3 })\n            smallUrl: url(transform: { maxHeight: 160, maxWidth: 160, crop: CENTER, scale: 3 })\n          }\n        }\n      }\n      descriptionHtml\n      variants(first: 10) {\n        edges {\n          node {\n            id\n            title\n            availableForSale\n            weight\n            weightUnit\n            quantityAvailable\n            price {\n              amount\n              currencyCode\n            }\n            compareAtPrice {\n              amount\n              currencyCode\n            }\n            selectedOptions {\n              name\n              value\n            }\n            image {\n              id\n            }\n          }\n        }\n      }\n      application: metafield(namespace: \"custom\", key: \"application\") {\n        key\n        value\n      }\n      benefits: metafield(namespace: \"custom\", key: \"benefits\") {\n        key\n        value\n      }\n      composition: metafield(namespace: \"custom\", key: \"composition\") {\n        key\n        value\n      }\n      conditionnement: metafield(namespace: \"custom\", key: \"conditionnement\") {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProduct($handle: String!) {\n    product(handle: $handle) {\n      id\n      handle\n      title\n      productType\n      tags\n      priceRange {\n        maxVariantPrice {\n          amount\n          currencyCode\n        }\n        minVariantPrice {\n          amount\n          currencyCode\n        }\n      }\n      images(first: 10) {\n        edges {\n          node {\n            id\n            altText\n            url(transform: { maxHeight: 700, maxWidth: 700, crop: CENTER, scale: 3 })\n            smallUrl: url(transform: { maxHeight: 160, maxWidth: 160, crop: CENTER, scale: 3 })\n          }\n        }\n      }\n      descriptionHtml\n      variants(first: 10) {\n        edges {\n          node {\n            id\n            title\n            availableForSale\n            weight\n            weightUnit\n            quantityAvailable\n            price {\n              amount\n              currencyCode\n            }\n            compareAtPrice {\n              amount\n              currencyCode\n            }\n            selectedOptions {\n              name\n              value\n            }\n            image {\n              id\n            }\n          }\n        }\n      }\n      application: metafield(namespace: \"custom\", key: \"application\") {\n        key\n        value\n      }\n      benefits: metafield(namespace: \"custom\", key: \"benefits\") {\n        key\n        value\n      }\n      composition: metafield(namespace: \"custom\", key: \"composition\") {\n        key\n        value\n      }\n      conditionnement: metafield(namespace: \"custom\", key: \"conditionnement\") {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetShop {\n    shop {\n      name\n      privacyPolicy {\n        title\n        handle\n      }\n      refundPolicy {\n        title\n        handle\n      }\n      termsOfService {\n        title\n        handle\n      }\n    }\n    collections(first: 4) {\n      edges {\n        node {\n          title\n          handle\n          products(first: 50) {\n            edges {\n              node {\n                productType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetShop {\n    shop {\n      name\n      privacyPolicy {\n        title\n        handle\n      }\n      refundPolicy {\n        title\n        handle\n      }\n      termsOfService {\n        title\n        handle\n      }\n    }\n    collections(first: 4) {\n      edges {\n        node {\n          title\n          handle\n          products(first: 50) {\n            edges {\n              node {\n                productType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProductFields on Product {\n    id\n    handle\n    title\n    productType\n    tags\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    images(first: 100) {\n      edges {\n        node {\n          altText\n          originalSrc\n          transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ProductFields on Product {\n    id\n    handle\n    title\n    productType\n    tags\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    images(first: 100) {\n      edges {\n        node {\n          altText\n          originalSrc\n          transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RootFields on QueryRoot {\n    shop {\n      ...ShopFields\n    }\n  }\n"): (typeof documents)["\n  fragment RootFields on QueryRoot {\n    shop {\n      ...ShopFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShopFields on Shop {\n    name\n    privacyPolicy {\n      title\n      handle\n    }\n    refundPolicy {\n      title\n      handle\n    }\n    termsOfService {\n      title\n      handle\n    }\n  }\n"): (typeof documents)["\n  fragment ShopFields on Shop {\n    name\n    privacyPolicy {\n      title\n      handle\n    }\n    refundPolicy {\n      title\n      handle\n    }\n    termsOfService {\n      title\n      handle\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment VariantFields on ProductVariant {\n    id\n    title\n    availableForSale\n    weight\n    weightUnit\n    priceV2 {\n      amount\n      currencyCode\n    }\n    compareAtPriceV2 {\n      amount\n      currencyCode\n    }\n    selectedOptions {\n      name\n      value\n    }\n    image {\n      altText\n      originalSrc\n      transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n    }\n  }\n"): (typeof documents)["\n  fragment VariantFields on ProductVariant {\n    id\n    title\n    availableForSale\n    weight\n    weightUnit\n    priceV2 {\n      amount\n      currencyCode\n    }\n    compareAtPriceV2 {\n      amount\n      currencyCode\n    }\n    selectedOptions {\n      name\n      value\n    }\n    image {\n      altText\n      originalSrc\n      transformedSrc(maxHeight: $maxHeight, maxWidth: $maxWidth, crop: CENTER, scale: 3)\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;